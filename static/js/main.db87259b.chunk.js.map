{"version":3,"sources":["blog.png","components/Home.jsx","components/CreateAPost.jsx","components/ShowCurrentPosts.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","state","posts","axios","get","then","res","console","log","setState","data","slice","listData","this","length","map","post","className","key","id","title","body","Component","withRouter","CreateAPost","props","type","ref","onClick","handleSubmit","refs","txt","value","tit","con","ShowCurrentPosts","arr","item","index","text","content","calender","App","showResult","time","getDate","date","Date","toLocaleString","a","b","c","src","blog","alt","to","exact","path","component","render","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db87259b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blog.18a254a3.png\";","import React, { Component } from 'react';\nimport {withRouter} from 'react-router-dom';\nimport axios from 'axios';\n\n\n\nclass Home extends Component {\n\n    state={\n        posts:[]\n    }\n    componentDidMount(){\n        axios.get('https://jsonplaceholder.typicode.com/posts')\n        .then(res =>{\n                console.log(res);\n                \n                this.setState({\n                    posts:res.data.slice(0,2)\n                })\n                \n            }) \n            // create programmatic redirects\n\n            // setTimeout((props) => {\n            //     props.history.push('/createAPost')\n                \n            // }, 3000);\n    \n    }\n\n    componentWillMount(){\n        \n    }\n    render() {\n\n        const listData=  this.state.posts.length ? (\n            this.state.posts.map(post=>{\n                return(\n\n                  \n                <div className='post card ' key={post.id}>\n                   \n                <div className=\"card-content\">\n                    <div className=\"card-title coloring\">{post.title}</div>\n                    <p>{post.body}</p>\n                </div>\n                </div>\n            \n            )\n            })\n            \n        ) :(\n            <div className=\"center\">No Current Posts</div>\n         \n        )\n        return (\n            <main>\n                <p className='paragraph'>Welcome to our blog site</p>\n                    {listData}\n            </main>\n        )\n    }\n}\n\nexport default withRouter(Home)\n","import React, { Component } from \"react\";\n//import ShowCurrentPosts from \"./ShowCurrentPosts\";\n\nclass CreateAPost extends Component {\n    // console.log(text);\n  render() {\n    console.log(this.props);\n    \n    return (\n      <section className=\"form\">\n        \n          <label>\n            UserName:\n            <input  type=\"text\" ref=\"txt\" /*  text={this.state.text} */ />  \n          </label>\n          <br />\n\n          <br />\n          <label>\n            Title:\n            <input type=\"text\" ref=\"tit\" /* title={this.state.title} */ />\n          \n          </label>\n          <br />\n\n          <br />\n\n          <label className=\"box\">\n            Content:\n            <textarea type=\"text\" ref=\"con\" /* content={this.state.content} */ />\n          </label>\n          <br />\n          <button type=\"button\" onClick={()=> this.props.handleSubmit(this.refs.txt.value,this.refs.tit.value,this.refs.con.value)}>\n            Creat Post\n          </button>\n        \n      </section>\n    );\n  }\n}\n\nexport default CreateAPost;\n","import React, { Component } from \"react\";\n//import CreateAPost from \"./CreateAPost\";\n\nclass ShowCurrentPosts extends Component {\n  \n  render() {\n    //console.log(this.props.showResult);\n\n    /*   const result = this.props.showResult.map((list,index)=>(\n          <li key={index}>{list}</li> \n         \n       )) ;  */\n        console.log(this.props.arr);\n        \n    return (\n      <div className=\"result\">\n        \n        {this.props.arr.map ((item,index)=>{\n          return (\n            < div key={index}>\n            <p> {item.title}</p><hr />\n            <p>{item.text}</p><hr />\n            <p>{item.content}</p><hr />\n            <p>{this.props.calender}</p>\n</div>          \n          )\n        })}\n          \n      </div>\n    );\n  }\n}\n\nexport default ShowCurrentPosts;\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Link, Route, Switch} from 'react-router-dom';\nimport Home from './components/Home';\nimport CreateAPost from './components/CreateAPost';\nimport ShowCurrentPosts from './components/ShowCurrentPosts';\nimport blog from './blog.png'\n\n\nexport default class App extends React.Component {\n  state={\n    text: \"\",\n    title: \"\",\n    content: \"\",\n    showResult: [],\n    time: ''\n  }\n  \n\n\n  componentDidMount(){\n    this.getDate()\n  }\n\n  getDate =()=>{\n    let date = new Date().toLocaleString()\n    this.setState({\n      time:date\n    })\n  }\n\n\n /*  handleChange =(a,b,c) => {\n    this.setState({\n      text: a,\n      title: b, \n      content: c\n    });\n  } */\n\n  handleSubmit =(a,b,c) => {\n    //event.preventDefault();\n    let post = {\n      title: a,\n      text: b,\n      content: c,\n    };\n    console.log(post);\n    \n    this.setState({\n      showResult: [...this.state.showResult, post]\n    });\n  };\n  render(){\n  return (\n    <Router>\n    <section>\n   \n      <nav>\n      <div className=\"nav-wrapper color\">\n        \n      <img src={blog} alt=\"bolg post\" />\n      <ul id=\"nav-mobile\" className=\"right  \">\n        <li><Link to=\"/\" className=\"link\">Home</Link></li>\n        <li><Link to =\"CreateAPost\" className=\"link\">Create A Post</Link></li>\n        <li><Link to=\"ShowCurrentPosts\" className=\"link\">Show Current Posts</Link></li>\n        </ul>\n      </div>\n      </nav>\n      <Switch>\n        <Route exact path=\"/\" component={Home} /* text={this.state.text} */ />\n        <Route path=\"/CreateAPost\" render={()=> <CreateAPost handleSubmit={this.handleSubmit} />} />\n        <Route path=\"/ShowCurrentPosts\" render= {()=> <ShowCurrentPosts arr={this.state.showResult} calender={this.state.time} />} />\n\n        </Switch>\n    </section>\n   \n    </Router>\n  )\n}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}