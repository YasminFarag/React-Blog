{"version":3,"sources":["components/Home.jsx","components/CreateAPost.jsx","components/ShowCurrentPosts.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","className","Component","CreateAPost","props","handleChange","event","inputTxt","target","value","setState","text","handleSubmit","preventDefault","formValue","document","getElementsByTagName","console","log","state","newState","showResult","submitValue","e","result","onSubmit","this","type","onChange","handleClick","onClick","ShowCurrentPosts","data","App","to","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAYeA,EAVf,iLAEQ,OACI,8BACI,uBAAGC,UAAU,aAAb,iCAJhB,GAA0BC,a,QC6EXC,E,YA3Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,aAAe,SAAAC,GACb,IAAMC,EAAWD,EAAME,OAAOC,MAC9B,EAAKC,SAAS,CACZC,KAAMJ,KAZS,EAiBnBK,aAAe,SAAAN,GACbA,EAAMO,iBACN,IAAIC,EAAYC,SAASC,qBAAqB,SAC9CC,QAAQC,IAAIJ,EAAU,GAAGL,OACzBQ,QAAQC,IAAI,EAAKC,OAEjB,EAAKT,SAAS,SAAAU,GAAQ,MAAK,CACzBC,WAAW,GAAD,mBAAMD,EAASC,YAAf,CAA2B,EAAKF,MAAMR,WAxBjC,EA4BnBW,YAAc,SAAAC,GACZ,EAAKnB,MAAMoB,OAAO,EAAKL,MAAMR,OA1B7B,EAAKQ,MAAQ,CACXR,KAAM,GACNU,WAAY,IALG,E,sEAiCjB,OACE,iCACE,0BAAMI,SAAUC,KAAKd,cACnB,2CAEE,2BACEe,KAAK,OACwBC,SAAUF,KAAKrB,gBAGhD,6BAEA,6BACA,wCAEE,2BACEsB,KAAK,OACuBC,SAAUF,KAAKrB,gBAG/C,6BAEA,6BAEA,2BAAOJ,UAAU,OAAjB,WAEE,8BACE0B,KAAK,OACuBC,SAAUF,KAAKG,eAG/C,6BAEA,4BAAQF,KAAK,SAASG,QAASJ,KAAKJ,aAApC,oB,GAnEgBpB,aC2BX6B,E,2MA1BbC,KAAO,SAAAT,GACL,EAAKb,SAAS,CACZC,KAAMY,K,wEAWR,OACE,6BACE,oDAEA,6BAEA,kBAAC,EAAD,CAAaC,OAAQE,KAAKM,OAC1B,2BAAIN,KAAKtB,MAAMO,W,GArBQT,aCKV+B,E,iLAGnB,OACE,kBAAC,IAAD,KACA,iCACE,yBAAKhC,UAAU,cACb,4BAAI,kBAAC,IAAD,CAAMiC,GAAG,IAAIjC,UAAU,QAAvB,SACJ,4BAAI,kBAAC,IAAD,CAAMiC,GAAI,cAAcjC,UAAU,QAAlC,kBACJ,4BAAI,kBAAC,IAAD,CAAMiC,GAAG,mBAAmBjC,UAAU,QAAtC,wBAEN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjC,kBAAC,IAAD,CAAOoC,KAAK,eAAeC,UAAWlC,IACtC,kBAAC,IAAD,CAAOiC,KAAK,oBAAoBC,UAAYN,W,GAdnBO,IAAMpC,WCInBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAAS+B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4dffa50a.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Home extends Component {\n    render() {\n        return (\n            <main>\n                <p className='paragraph'>Welcome to our blog site</p>\n            </main>\n        )\n    }\n}\n\nexport default Home\n","import React, { Component } from \"react\";\n//import ShowCurrentPosts from \"./ShowCurrentPosts\";\n\nclass CreateAPost extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      showResult: []\n    };\n  }\n\n  handleChange = event => {\n    const inputTxt = event.target.value;\n    this.setState({\n      text: inputTxt\n    });\n    //console.log(inputTxt, 'input');\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    let formValue = document.getElementsByTagName(\"input\");\n    console.log(formValue[0].value);\n    console.log(this.state);\n\n    this.setState(newState => ({\n      showResult: [...newState.showResult, this.state.text]\n    }));\n  };\n\n  submitValue = e => {\n    this.props.result(this.state.text);\n  };\n\n  render() {\n    return (\n      <section>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            UserName:\n            <input\n              type=\"text\"\n              /* text={this.state.text} */ onChange={this.handleChange}\n            />\n          </label>\n          <br />\n\n          <br />\n          <label>\n            Title:\n            <input\n              type=\"text\"\n              /* text={this.state.text}*/ onChange={this.handleChange}\n            />\n          </label>\n          <br />\n\n          <br />\n\n          <label className=\"box\">\n            Content:\n            <textarea\n              type=\"text\"\n              /* text={this.state.text}*/ onChange={this.handleClick}\n            />\n          </label>\n          <br />\n\n          <button type=\"submit\" onClick={this.submitValue}>\n            Creat Post\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nexport default CreateAPost;\n","import React, { Component } from \"react\";\nimport CreateAPost from \"./CreateAPost\";\n\nclass ShowCurrentPosts extends Component {\n  data = e => {\n    this.setState({\n      text: e\n    });\n  };\n  render() {\n    //console.log(this.props.showResult);\n\n    /*   const result = this.props.showResult.map((list,index)=>(\n          <li key={index}>{list}</li> \n         \n       )) ;  */\n\n    return (\n      <div>\n        <h2>hello to show posts </h2>\n\n        <ul>{}</ul>\n\n        <CreateAPost result={this.data} />\n        <p>{this.props.text}</p>\n      </div>\n    );\n  }\n}\n\nexport default ShowCurrentPosts;\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Link, Route, Switch} from 'react-router-dom';\nimport Home from './components/Home';\nimport CreateAPost from './components/CreateAPost';\nimport ShowCurrentPosts from './components/ShowCurrentPosts';\n\n\nexport default class App extends React.Component {\n  \n  render(){\n  return (\n    <Router>\n    <section>\n      <nav className=\"navigation\">\n        <li><Link to=\"/\" className=\"link\">Home</Link></li>\n        <li><Link to =\"CreateAPost\" className=\"link\">Create A Post</Link></li>\n        <li><Link to=\"ShowCurrentPosts\" className=\"link\">Show Current Posts</Link></li>\n      </nav>\n      <Switch>\n        <Route exact path=\"/\" component={Home} /* text={this.state.text} */ />\n        <Route path=\"/CreateAPost\" component={CreateAPost} />\n        <Route path=\"/ShowCurrentPosts\" component= {ShowCurrentPosts} />\n\n        </Switch>\n      \n    </section>\n   \n    </Router>\n  )\n}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}